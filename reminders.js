// GESTI√ìN DE RECORDATORIOS

function populateSubjectSelect() {
  const select = document.getElementById('reminderSubject');
  if (!select) return;
  
  select.innerHTML = '<option value="">Seleccionar materia (opcional)</option>';
  state.subjects.forEach(subject => {
    select.innerHTML += `<option value="${subject.id}">${subject.name}</option>`;
  });
}

function addReminder() {
  const title = document.getElementById('reminderTitle').value.trim();
  const date = document.getElementById('reminderDate').value;
  const time = document.getElementById('reminderTime').value;
  const subjectId = document.getElementById('reminderSubject').value;
  const description = document.getElementById('reminderDescription').value.trim();
  
  if (!title || !date || !time) {
    alert('Por favor completa todos los campos obligatorios');
    return;
  }
  
  const reminder = {
    id: Date.now().toString(),
    title,
    date,
    time,
    subjectId,
    description,
    completed: false,
    createdAt: new Date().toISOString()
  };
  
  state.reminders.push(reminder);
  saveData();
  closeModal('reminderModal');
  resetForm('reminderModal');
  renderAll();
  
  // Limpiar el formulario
  document.getElementById('reminder-title').value = '';
  document.getElementById('reminder-description').value = '';
  document.getElementById('reminder-date').value = '';
  document.getElementById('reminder-time').value = '';
  document.getElementById('reminder-subject').value = '';
}

function editReminder(reminderId) {
  const reminder = state.reminders.find(r => r.id === reminderId);
  if (!reminder) return;
  
  // Llenar el formulario con los datos actuales
  document.getElementById('reminderTitle').value = reminder.title;
  document.getElementById('reminderDate').value = reminder.date;
  document.getElementById('reminderTime').value = reminder.time;
  document.getElementById('reminderSubject').value = reminder.subjectId || '';
  document.getElementById('reminderDescription').value = reminder.description || '';
  
  // Cambiar el comportamiento del bot√≥n de guardar
  const saveBtn = document.querySelector('#reminderModal .btn-confirm');
  saveBtn.onclick = () => {
    const title = document.getElementById('reminderTitle').value.trim();
    const date = document.getElementById('reminderDate').value;
    const time = document.getElementById('reminderTime').value;
    const subjectId = document.getElementById('reminderSubject').value;
    const description = document.getElementById('reminderDescription').value.trim();
    
    if (!title || !date || !time) {
      alert('Por favor completa todos los campos obligatorios');
      return;
    }
    
    // Actualizar el recordatorio
    const reminderIndex = state.reminders.findIndex(r => r.id === reminderId);
    if (reminderIndex !== -1) {
      state.reminders[reminderIndex] = {
        ...state.reminders[reminderIndex],
        title,
        date,
        time,
        subjectId,
        description
      };
      
      saveData();
      closeModal('reminderModal');
      renderAll(); // Actualizar todas las secciones
      
      // Restaurar el comportamiento original del bot√≥n
      saveBtn.onclick = addReminder;
    }
  };
  
  openModal('reminderModal');
}

function deleteReminder(reminderId) {
  if (confirm('¬øEst√°s seguro de que quieres eliminar este recordatorio?')) {
    state.reminders = state.reminders.filter(r => r.id !== reminderId);
    saveData();
    renderAll(); // Actualizar todas las secciones
  }
}

function toggleReminderComplete(reminderId) {
  const reminder = state.reminders.find(r => r.id === reminderId);
  if (reminder) {
    reminder.completed = !reminder.completed;
    saveData();
    renderAll(); // Actualizar todas las secciones
  }
}

function createSmartReminder(exam, subject) {
  const examDate = new Date(exam.date);
  
  // Recordatorio una semana antes
  const weekBefore = new Date(examDate);
  weekBefore.setDate(weekBefore.getDate() - 7);
  
  const weekReminder = {
    id: `exam-week-${exam.id || Date.now()}`,
    title: `üìö Examen de ${exam.name} en una semana`,
    date: weekBefore.toISOString().split('T')[0],
    time: '09:00',
    subjectId: subject.id,
    description: `Recuerda estudiar para el examen de ${exam.name} (${exam.type}). Temas: ${exam.topics}`,
    completed: false,
    createdAt: new Date().toISOString(),
    isAutoGenerated: true
  };
  
  // Recordatorio un d√≠a antes
  const dayBefore = new Date(examDate);
  dayBefore.setDate(dayBefore.getDate() - 1);
  
  const dayReminder = {
    id: `exam-day-${exam.id || Date.now()}`,
    title: `‚ö° Examen de ${exam.name} ma√±ana`,
    date: dayBefore.toISOString().split('T')[0],
    time: '20:00',
    subjectId: subject.id,
    description: `¬°√öltimo repaso! Examen de ${exam.name} ma√±ana. Revisa: ${exam.topics}`,
    completed: false,
    createdAt: new Date().toISOString(),
    isAutoGenerated: true
  };
  
  // Solo agregar si no existen ya
  const existingWeek = state.reminders.find(r => r.id === weekReminder.id);
  const existingDay = state.reminders.find(r => r.id === dayReminder.id);
  
  if (!existingWeek && weekBefore >= new Date()) {
    state.reminders.push(weekReminder);
  }
  
  if (!existingDay && dayBefore >= new Date()) {
    state.reminders.push(dayReminder);
  }
}

function renderUpcomingEvents() {
  const container = document.getElementById('upcomingEvents');
  if (!container) return;
  
  const today = new Date();
  const futureLimit = new Date();
  futureLimit.setDate(today.getDate() + 30); // Buscar en los pr√≥ximos 30 d√≠as
  
  // Obtener eventos pr√≥ximos (recordatorios y ex√°menes)
  const upcomingReminders = state.reminders
    .filter(reminder => {
      const reminderDate = new Date(`${reminder.date}T${reminder.time}`);
      return reminderDate >= today && reminderDate <= futureLimit && !reminder.completed;
    })
    .sort((a, b) => new Date(`${a.date}T${a.time}`) - new Date(`${b.date}T${b.time}`));
  
  const upcomingExams = [];
  state.subjects.forEach(subject => {
    if (subject.exams) {
      subject.exams.forEach(exam => {
        const examDate = new Date(exam.date);
        if (examDate >= today && examDate <= futureLimit) {
          upcomingExams.push({
            ...exam,
            subjectName: subject.name,
            subjectColor: subject.color,
            type: 'exam'
          });
        }
      });
    }
  });
  
  const allEvents = [...upcomingReminders, ...upcomingExams]
    .sort((a, b) => {
      const dateA = a.type === 'exam' ? new Date(a.date) : new Date(`${a.date}T${a.time}`);
      const dateB = b.type === 'exam' ? new Date(b.date) : new Date(`${b.date}T${b.time}`);
      return dateA - dateB;
    });
  
  if (allEvents.length === 0) {
    container.innerHTML = '<div class="next-event-empty"><p>No hay eventos pr√≥ximos</p><small>Agrega eventos en la secci√≥n "Todos los Eventos"</small></div>';
    return;
  }
  
  // Mostrar solo el evento m√°s pr√≥ximo
  const nextEvent = allEvents[0];
  
  if (nextEvent.type === 'exam') {
    const eventDate = new Date(nextEvent.date);
    const daysUntil = Math.ceil((eventDate - today) / (1000 * 60 * 60 * 24));
    
    container.innerHTML = `
      <div class="next-event-card exam-card" style="--accent-color: ${nextEvent.subjectColor}">
        <div class="next-event-icon">üìù</div>
        <div class="next-event-content">
          <h3 class="next-event-title">${nextEvent.name}</h3>
          <p class="next-event-subject">${nextEvent.subjectName}</p>
          <div class="next-event-date">
            <span class="date-text">${eventDate.toLocaleDateString('es-ES', { weekday: 'long', day: 'numeric', month: 'long' })}</span>
            <span class="days-until">${daysUntil === 0 ? 'Hoy' : daysUntil === 1 ? 'Ma√±ana' : `En ${daysUntil} d√≠as`}</span>
          </div>
          ${nextEvent.topics ? `<p class="next-event-description">${nextEvent.topics}</p>` : ''}
        </div>
      </div>
    `;
  } else {
    const eventDateTime = new Date(`${nextEvent.date}T${nextEvent.time}`);
    const daysUntil = Math.ceil((eventDateTime - today) / (1000 * 60 * 60 * 24));
    const subject = state.subjects.find(s => s.id === nextEvent.subjectId);
    
    container.innerHTML = `
      <div class="next-event-card reminder-card" style="--accent-color: ${subject?.color || '#4CAF50'}">
        <div class="next-event-icon">‚è∞</div>
        <div class="next-event-content">
          <h3 class="next-event-title">${nextEvent.title}</h3>
          ${subject ? `<p class="next-event-subject">${subject.name}</p>` : ''}
          <div class="next-event-date">
            <span class="date-text">${eventDateTime.toLocaleDateString('es-ES', { weekday: 'long', day: 'numeric', month: 'long' })} a las ${nextEvent.time}</span>
            <span class="days-until">${daysUntil === 0 ? 'Hoy' : daysUntil === 1 ? 'Ma√±ana' : `En ${daysUntil} d√≠as`}</span>
          </div>
          ${nextEvent.description ? `<p class="next-event-description">${nextEvent.description}</p>` : ''}
        </div>
      </div>
    `;
  }
}

/* addEventToSelectedDay eliminada - ya existe en calendar.js */

// RENDERIZADO DE TODOS LOS EVENTOS
function renderAllEvents() {
  const container = document.getElementById('allEventsList');
  const filter = document.getElementById('eventFilter')?.value || 'all';
  
  if (!container) return;
  
  // Combinar recordatorios y ex√°menes
  const allEvents = [];
  
  // Agregar recordatorios
  state.reminders.forEach(reminder => {
    allEvents.push({
      ...reminder,
      type: 'reminder',
      datetime: new Date(`${reminder.date}T${reminder.time}`)
    });
  });
  
  // Agregar eventos sincronizados (ex√°menes)
  if (state.events) {
    state.events.forEach(event => {
      allEvents.push({
        ...event,
        datetime: new Date(`${event.date}T09:00`)
      });
    });
  }
  
  // Agregar ex√°menes directos (para compatibilidad)
  state.subjects.forEach(subject => {
    if (subject.exams) {
      subject.exams.forEach(exam => {
        // Solo agregar si no existe ya como evento sincronizado
        const eventId = `exam_${exam.id}`;
        const existsInEvents = state.events && state.events.some(e => e.id === eventId);
        
        if (!existsInEvents) {
          allEvents.push({
            ...exam,
            type: 'exam',
            subjectId: subject.id,
            subjectName: subject.name,
            datetime: new Date(`${exam.date}T${exam.time || '09:00'}`)
          });
        }
      });
    }
  });
  
  // Filtrar eventos
  let filteredEvents = allEvents;
  const now = new Date();
  
  switch (filter) {
    case 'pending':
      filteredEvents = allEvents.filter(event => 
        event.type === 'reminder' ? !event.completed : true
      );
      break;
    case 'completed':
      filteredEvents = allEvents.filter(event => 
        event.type === 'reminder' && event.completed
      );
      break;
    case 'upcoming':
      const weekFromNow = new Date(now.getTime() + 7 * 24 * 60 * 60 * 1000);
      filteredEvents = allEvents.filter(event => 
        event.datetime >= now && event.datetime <= weekFromNow
      );
      break;
  }
  
  // Ordenar por fecha y hora
  filteredEvents.sort((a, b) => a.datetime - b.datetime);
  
  if (filteredEvents.length === 0) {
    container.innerHTML = `
      <div class="empty-state">
        <p>No hay eventos para mostrar</p>
        <small>Agrega recordatorios o programa ex√°menes para verlos aqu√≠</small>
      </div>
    `;
    return;
  }
  
  container.innerHTML = filteredEvents.map(event => {
    const subject = event.type === 'exam' ? 
      { name: event.subjectName } : 
      state.subjects.find(s => s.id === event.subjectId);
    
    const isOverdue = event.datetime < now;
    const isPast = event.datetime < now;
    
    return `
      <div class="event-item ${event.type} ${event.completed ? 'completed' : ''} ${isOverdue ? 'overdue' : ''}">
        <div class="event-icon">
          ${event.type === 'exam' ? 'üìù' : '‚è∞'}
        </div>
        <div class="event-content">
          <div class="event-header">
            <h4 class="event-title">${event.title || event.name}</h4>
            <div class="event-actions">
              ${event.type === 'reminder' ? `
                <button onclick="toggleReminderComplete('${event.id}')" class="btn-icon ${event.completed ? 'completed' : ''}">
                  ${event.completed ? '‚úÖ' : '‚≠ï'}
                </button>
                <button onclick="editReminder('${event.id}')" class="btn-icon edit">
                  ‚úèÔ∏è
                </button>
                <button onclick="deleteReminder('${event.id}')" class="btn-icon delete">
                  üóëÔ∏è
                </button>
              ` : `
                <button onclick="editExam('${event.subjectId}', '${event.id}')" class="btn-icon edit">
                  ‚úèÔ∏è
                </button>
                <button onclick="deleteExam('${event.subjectId}', '${event.id}')" class="btn-icon delete">
                  üóëÔ∏è
                </button>
              `}
            </div>
          </div>
          ${subject ? `<p class="event-subject">${subject.name}</p>` : ''}
          <div class="event-datetime">
            <span class="date">${event.datetime.toLocaleDateString('es-ES', { 
              weekday: 'long', 
              day: 'numeric', 
              month: 'long', 
              year: 'numeric' 
            })}</span>
            <span class="time">${event.time || '09:00'}</span>
          </div>
          ${event.description ? `<p class="event-description">${event.description}</p>` : ''}
          ${isPast && !event.completed ? '<span class="overdue-badge">Vencido</span>' : ''}
        </div>
      </div>
    `;
  }).join('');
}

// Exportar funciones al objeto window
window.populateSubjectSelect = populateSubjectSelect;
window.addReminder = addReminder;
window.editReminder = editReminder;
window.updateReminder = updateReminder;
window.deleteReminder = deleteReminder;
window.toggleReminderComplete = toggleReminderComplete;
window.createExamReminders = createExamReminders;
window.renderUpcomingEvents = renderUpcomingEvents;
window.renderAllEvents = renderAllEvents;
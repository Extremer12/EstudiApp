// GESTI√ìN DE RECORDATORIOS

function populateSubjectSelect() {
  const select = document.getElementById('reminderSubject');
  if (!select) return;
  
  select.innerHTML = '<option value="">Seleccionar materia (opcional)</option>';
  state.subjects.forEach(subject => {
    select.innerHTML += `<option value="${subject.id}">${subject.name}</option>`;
  });
}

function addReminder() {
  const title = document.getElementById('reminderTitle').value.trim();
  const date = document.getElementById('reminderDate').value;
  const time = document.getElementById('reminderTime').value;
  const subjectId = document.getElementById('reminderSubject').value;
  const description = document.getElementById('reminderDescription').value.trim();
  
  if (!title || !date || !time) {
    alert('Por favor completa todos los campos obligatorios');
    return;
  }
  
  const reminder = {
    id: Date.now().toString(),
    title,
    date,
    time,
    subjectId,
    description,
    completed: false,
    createdAt: new Date().toISOString()
  };
  
  state.reminders.push(reminder);
  saveData();
  closeModal('reminderModal');
  resetForm('reminderModal');
  renderAll();
}

function editReminder(reminderId) {
  const reminder = state.reminders.find(r => r.id === reminderId);
  if (!reminder) return;
  
  // Llenar el formulario con los datos actuales
  document.getElementById('reminderTitle').value = reminder.title;
  document.getElementById('reminderDate').value = reminder.date;
  document.getElementById('reminderTime').value = reminder.time;
  document.getElementById('reminderSubject').value = reminder.subjectId || '';
  document.getElementById('reminderDescription').value = reminder.description || '';
  
  // Cambiar el comportamiento del bot√≥n de guardar
  const saveBtn = document.querySelector('#reminderModal .btn-confirm');
  saveBtn.onclick = () => {
    const title = document.getElementById('reminderTitle').value.trim();
    const date = document.getElementById('reminderDate').value;
    const time = document.getElementById('reminderTime').value;
    const subjectId = document.getElementById('reminderSubject').value;
    const description = document.getElementById('reminderDescription').value.trim();
    
    if (!title || !date || !time) {
      alert('Por favor completa todos los campos obligatorios');
      return;
    }
    
    // Actualizar el recordatorio
    const reminderIndex = state.reminders.findIndex(r => r.id === reminderId);
    if (reminderIndex !== -1) {
      state.reminders[reminderIndex] = {
        ...state.reminders[reminderIndex],
        title,
        date,
        time,
        subjectId,
        description
      };
      
      saveData();
      closeModal('reminderModal');
      
      // Restaurar el comportamiento original del bot√≥n
      saveBtn.onclick = addReminder;
    }
  };
  
  openModal('reminderModal');
}

function deleteReminder(reminderId) {
  if (confirm('¬øEst√°s seguro de que quieres eliminar este recordatorio?')) {
    state.reminders = state.reminders.filter(r => r.id !== reminderId);
    saveData();
  }
}

function toggleReminderComplete(reminderId) {
  const reminder = state.reminders.find(r => r.id === reminderId);
  if (reminder) {
    reminder.completed = !reminder.completed;
    saveData();
  }
}

function createSmartReminder(exam, subject) {
  const examDate = new Date(exam.date);
  
  // Recordatorio una semana antes
  const weekBefore = new Date(examDate);
  weekBefore.setDate(weekBefore.getDate() - 7);
  
  const weekReminder = {
    id: `exam-week-${exam.id || Date.now()}`,
    title: `üìö Examen de ${exam.name} en una semana`,
    date: weekBefore.toISOString().split('T')[0],
    time: '09:00',
    subjectId: subject.id,
    description: `Recuerda estudiar para el examen de ${exam.name} (${exam.type}). Temas: ${exam.topics}`,
    completed: false,
    createdAt: new Date().toISOString(),
    isAutoGenerated: true
  };
  
  // Recordatorio un d√≠a antes
  const dayBefore = new Date(examDate);
  dayBefore.setDate(dayBefore.getDate() - 1);
  
  const dayReminder = {
    id: `exam-day-${exam.id || Date.now()}`,
    title: `‚ö° Examen de ${exam.name} ma√±ana`,
    date: dayBefore.toISOString().split('T')[0],
    time: '20:00',
    subjectId: subject.id,
    description: `¬°√öltimo repaso! Examen de ${exam.name} ma√±ana. Revisa: ${exam.topics}`,
    completed: false,
    createdAt: new Date().toISOString(),
    isAutoGenerated: true
  };
  
  // Solo agregar si no existen ya
  const existingWeek = state.reminders.find(r => r.id === weekReminder.id);
  const existingDay = state.reminders.find(r => r.id === dayReminder.id);
  
  if (!existingWeek && weekBefore >= new Date()) {
    state.reminders.push(weekReminder);
  }
  
  if (!existingDay && dayBefore >= new Date()) {
    state.reminders.push(dayReminder);
  }
}

function renderUpcomingEvents() {
  const container = document.getElementById('upcomingEvents');
  if (!container) return;
  
  const today = new Date();
  const nextWeek = new Date();
  nextWeek.setDate(today.getDate() + 7);
  
  // Obtener eventos pr√≥ximos (recordatorios y ex√°menes)
  const upcomingReminders = state.reminders
    .filter(reminder => {
      const reminderDate = new Date(`${reminder.date}T${reminder.time}`);
      return reminderDate >= today && reminderDate <= nextWeek && !reminder.completed;
    })
    .sort((a, b) => new Date(`${a.date}T${a.time}`) - new Date(`${b.date}T${b.time}`));
  
  const upcomingExams = [];
  state.subjects.forEach(subject => {
    if (subject.exams) {
      subject.exams.forEach(exam => {
        const examDate = new Date(exam.date);
        if (examDate >= today && examDate <= nextWeek) {
          upcomingExams.push({
            ...exam,
            subjectName: subject.name,
            subjectColor: subject.color,
            type: 'exam'
          });
        }
      });
    }
  });
  
  const allEvents = [...upcomingReminders, ...upcomingExams]
    .sort((a, b) => {
      const dateA = a.type === 'exam' ? new Date(a.date) : new Date(`${a.date}T${a.time}`);
      const dateB = b.type === 'exam' ? new Date(b.date) : new Date(`${b.date}T${b.time}`);
      return dateA - dateB;
    });
  
  if (allEvents.length === 0) {
    container.innerHTML = '<p class="empty-state">No hay eventos pr√≥ximos</p>';
    return;
  }
  
  container.innerHTML = allEvents.slice(0, 5).map(event => {
    if (event.type === 'exam') {
      return `
        <div class="event-item exam-event" style="border-left: 4px solid ${event.subjectColor}">
          <div class="event-header">
            <h4>üìù ${event.name}</h4>
            <span class="event-date">${new Date(event.date).toLocaleDateString()}</span>
          </div>
          <p class="event-subject">${event.subjectName} - ${event.type}</p>
          <p class="event-description">${event.topics}</p>
        </div>
      `;
    } else {
      const subject = state.subjects.find(s => s.id === event.subjectId);
      return `
        <div class="event-item reminder-event">
          <div class="event-header">
            <h4>‚è∞ ${event.title}</h4>
            <span class="event-date">${new Date(event.date).toLocaleDateString()} ${event.time}</span>
          </div>
          ${subject ? `<p class="event-subject">${subject.name}</p>` : ''}
          ${event.description ? `<p class="event-description">${event.description}</p>` : ''}
          <div class="event-actions">
            <button onclick="toggleReminderComplete('${event.id}')" class="btn-small">‚úì</button>
            <button onclick="editReminder('${event.id}')" class="btn-small">‚úèÔ∏è</button>
            <button onclick="deleteReminder('${event.id}')" class="btn-small">üóëÔ∏è</button>
          </div>
        </div>
      `;
    }
  }).join('');
}

function addEventToSelectedDay() {
  if (!selectedDate) {
    alert('Por favor selecciona un d√≠a primero');
    return;
  }
  
  // Cerrar la modal de eventos del d√≠a
  closeModal('dayEventsModal');
  
  // Abrir la modal de recordatorios con la fecha preseleccionada
  openModal('reminderModal');
  
  // Preseleccionar la fecha en el campo oculto
  const dateInput = document.querySelector('#reminderModal #reminderDate');
  const timeInput = document.querySelector('#reminderModal #reminderTime');
  
  if (dateInput) {
    dateInput.value = selectedDate;
  }
  
  if (timeInput) {
    timeInput.value = '09:00'; // Hora por defecto
    timeInput.focus(); // Enfocar el campo de hora
  }
}